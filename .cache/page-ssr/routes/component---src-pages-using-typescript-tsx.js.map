{"version":3,"file":"component---src-pages-using-typescript-tsx.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/using-typescript.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <Seo title=\"Using TypeScript\" />\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <em>.ts/.tsx</em> files for your\n      pages, components etc. Please note that the <em>gatsby-*.js</em> files\n      (like gatsby-node.js) currently don't support TypeScript yet.\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n"],"names":["React","Link","Layout","location","title","children","rootPath","__PATH_PREFIX__","isRootPath","pathname","header","Date","getFullYear","PropTypes","Helmet","useStaticQuery","Seo","description","lang","meta","site","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","concat","defaultProps","propTypes","string","arrayOf","object","isRequired","UsingTypescript","data","path","buildTime","query"],"sourceRoot":""}